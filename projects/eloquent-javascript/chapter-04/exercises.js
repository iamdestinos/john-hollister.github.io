////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//return an array containing all values between start and end including start / end
function range(start, end, option) {
 var output = [];
 if(start === end){
   return output;
 }

 if(!option){
  for(let i = start; i <= end; i++){
    output.push(i);
  }
 } else if(option > 0) {
   for(let i = start; i <= end; i += option){
     output.push(i);
   }
 } else if(option < 0){
   for(let i = start; i >= end; i -= option){
     output.push(i);
   }
 }
 
 return output;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//take an array and return sum of values
function sum(array) {
  var output = 0;

  for(let i = 0; i < array.length; i++){
    output += array[i];
  }

  return output;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//return new array that is reverse of old array
function reverseArray(array) {
 var output = [];

 for(let i = 0; i < array.length; i++){
   output.unshift(array[i]);
 }

 return output;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// make input array reverse of how it was
function reverseArrayInPlace(array) {
  var reverse = [];

  for(let i = 0; i < array.length; i++){
    reverse.unshift(array[i]);
  }

  for(let i = 0; i < array.length; i++){
    array[i] = reverse[i];
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  //create rest value
  let rest = null;
  //iterate backwards through input array
  for(let i = array.length - 1; i >= 0; i--){
    //reassign the value of rest to an object with a key of value set to the current item in the array and a key of rest set to the current value of rest
    rest = {value: array[i], rest: rest};
  }

  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, arr=[]) {
  //base
  if(list.rest === null){
    arr.push(list.value);
    return arr;
  }
  //recursion
  //accessing current value propertyand adding it to arr
  arr.push(list.value);
  return listToArray(list.rest,arr);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//take an element and a list and return new list with element at beginning of new list
function prepend(value, list) {
  //make new obj
  var output = {value: value, rest: list};
  return output;
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//takes in a list and index and returns element at given position at list or undefined if no such element
function nth(list, n, count=0) {
  //base
  if(count === n){
    if(list.value){
      return list.value;
    } else {
      return undefined;
    }
  }
  if(n < 0){
    return undefined;
  }
  //recursion
  return nth(list.rest, n, count + 1);
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y){
  //determine if both values are not objects
  if(typeof x !== 'object' && typeof y !== 'object'){
    return x == y;
  }

  //determine if either value is not an object
  if(typeof x !== 'object' || typeof y !== 'object'){
    return false;
  }

  //create arrays of each inputs keys
  let xKeys = Object.keys(x);
  let yKeys = Object.keys(y);

  //determine if length f arrays are equal
  if(xKeys.length !== yKeys.length){
    return false;
  }

  for(let i = 0; i < xKeys.length; i++){
    if(!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[yKeys[i]])){
      return false;
    }
  }

  return true;
}
////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
